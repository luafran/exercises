##################################################
# file: NotificationService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b NotificationManagementService/NotificationService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://Intel.ServicesManager/Imports
##############################

class ns0:
    targetNamespace = "http://Intel.ServicesManager/Imports"

# end class ns0 (tns: http://Intel.ServicesManager/Imports)

##############################
# targetNamespace
# http://schemas.microsoft.com/2003/10/Serialization/
##############################

class ns1:
    targetNamespace = "http://schemas.microsoft.com/2003/10/Serialization/"

    class char_Def(ZSI.TCnumbers.Iint, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "char")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.Iint.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class duration_Def(ZSI.TCtimes.Duration, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "duration")
        def __init__(self, pname, **kw):
            ZSI.TCtimes.Duration.__init__(self, pname, pyclass=None, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class guid_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "guid")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class anyType_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "anyType"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","anyType")
            kw["aname"] = "_anyType"
            ZSI.TC.AnyType.__init__(self, **kw)

    class anyURI_Dec(ZSI.TC.URI, ElementDeclaration):
        literal = "anyURI"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","anyURI")
            kw["aname"] = "_anyURI"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_anyURI_immutable_holder"
            ZSI.TC.URI.__init__(self, **kw)

    class base64Binary_Dec(ZSI.TC.Base64String, ElementDeclaration):
        literal = "base64Binary"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","base64Binary")
            kw["aname"] = "_base64Binary"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_base64Binary_immutable_holder"
            ZSI.TC.Base64String.__init__(self, **kw)

    class boolean_Dec(ZSI.TC.Boolean, ElementDeclaration):
        literal = "boolean"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","boolean")
            kw["aname"] = "_boolean"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_boolean_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class byte_Dec(ZSI.TCnumbers.Ibyte, ElementDeclaration):
        literal = "byte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","byte")
            kw["aname"] = "_byte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_byte_immutable_holder"
            ZSI.TCnumbers.Ibyte.__init__(self, **kw)

    class dateTime_Dec(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "dateTime"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","dateTime")
            kw["aname"] = "_dateTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_dateTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class decimal_Dec(ZSI.TC.Decimal, ElementDeclaration):
        literal = "decimal"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","decimal")
            kw["aname"] = "_decimal"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_decimal_immutable_holder"
            ZSI.TC.Decimal.__init__(self, **kw)

    class double_Dec(ZSI.TCnumbers.FPdouble, ElementDeclaration):
        literal = "double"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","double")
            kw["aname"] = "_double"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_double_immutable_holder"
            ZSI.TCnumbers.FPdouble.__init__(self, **kw)

    class float_Dec(ZSI.TCnumbers.FPfloat, ElementDeclaration):
        literal = "float"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","float")
            kw["aname"] = "_float"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_float_immutable_holder"
            ZSI.TCnumbers.FPfloat.__init__(self, **kw)

    class int_Dec(ZSI.TCnumbers.Iint, ElementDeclaration):
        literal = "int"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","int")
            kw["aname"] = "_int"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_int_immutable_holder"
            ZSI.TCnumbers.Iint.__init__(self, **kw)

    class long_Dec(ZSI.TCnumbers.Ilong, ElementDeclaration):
        literal = "long"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","long")
            kw["aname"] = "_long"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_long_immutable_holder"
            ZSI.TCnumbers.Ilong.__init__(self, **kw)

    class QName_Dec(ZSI.TC.QName, ElementDeclaration):
        literal = "QName"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","QName")
            kw["aname"] = "_QName"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_QName_immutable_holder"
            ZSI.TC.QName.__init__(self, **kw)

    class short_Dec(ZSI.TCnumbers.Ishort, ElementDeclaration):
        literal = "short"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","short")
            kw["aname"] = "_short"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_short_immutable_holder"
            ZSI.TCnumbers.Ishort.__init__(self, **kw)

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","string")
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class unsignedByte_Dec(ZSI.TCnumbers.IunsignedByte, ElementDeclaration):
        literal = "unsignedByte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedByte")
            kw["aname"] = "_unsignedByte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedByte_immutable_holder"
            ZSI.TCnumbers.IunsignedByte.__init__(self, **kw)

    class unsignedInt_Dec(ZSI.TCnumbers.IunsignedInt, ElementDeclaration):
        literal = "unsignedInt"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedInt")
            kw["aname"] = "_unsignedInt"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedInt_immutable_holder"
            ZSI.TCnumbers.IunsignedInt.__init__(self, **kw)

    class unsignedLong_Dec(ZSI.TCnumbers.IunsignedLong, ElementDeclaration):
        literal = "unsignedLong"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedLong")
            kw["aname"] = "_unsignedLong"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedLong_immutable_holder"
            ZSI.TCnumbers.IunsignedLong.__init__(self, **kw)

    class unsignedShort_Dec(ZSI.TCnumbers.IunsignedShort, ElementDeclaration):
        literal = "unsignedShort"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedShort")
            kw["aname"] = "_unsignedShort"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedShort_immutable_holder"
            ZSI.TCnumbers.IunsignedShort.__init__(self, **kw)

    class char_Dec(ElementDeclaration):
        literal = "char"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","char")
            kw["aname"] = "_char"
            if ns1.char_Def not in ns1.char_Dec.__bases__:
                bases = list(ns1.char_Dec.__bases__)
                bases.insert(0, ns1.char_Def)
                ns1.char_Dec.__bases__ = tuple(bases)

            ns1.char_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "char_Dec_Holder"

    class duration_Dec(ElementDeclaration):
        literal = "duration"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","duration")
            kw["aname"] = "_duration"
            if ns1.duration_Def not in ns1.duration_Dec.__bases__:
                bases = list(ns1.duration_Dec.__bases__)
                bases.insert(0, ns1.duration_Def)
                ns1.duration_Dec.__bases__ = tuple(bases)

            ns1.duration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "duration_Dec_Holder"

    class guid_Dec(ElementDeclaration):
        literal = "guid"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","guid")
            kw["aname"] = "_guid"
            if ns1.guid_Def not in ns1.guid_Dec.__bases__:
                bases = list(ns1.guid_Dec.__bases__)
                bases.insert(0, ns1.guid_Def)
                ns1.guid_Dec.__bases__ = tuple(bases)

            ns1.guid_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "guid_Dec_Holder"

# end class ns1 (tns: http://schemas.microsoft.com/2003/10/Serialization/)

##############################
# targetNamespace
# http://Intel.ServicesManager.ServiceContracts
##############################

class ns2:
    targetNamespace = "http://Intel.ServicesManager.ServiceContracts"

    class ArrayOfRemoteMessageType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://Intel.ServicesManager.ServiceContracts"
        type = (schema, "ArrayOfRemoteMessageType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ArrayOfRemoteMessageType_Def.schema
            TClist = [GTD("http://Intel.ServicesManager.ServiceContracts","RemoteMessageType",lazy=False)(pname=(ns,"RemoteMessageType"), aname="_RemoteMessageType", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemoteMessageType = []
                    return
            Holder.__name__ = "ArrayOfRemoteMessageType_Holder"
            self.pyclass = Holder

    class RemoteMessageType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://Intel.ServicesManager.ServiceContracts"
        type = (schema, "RemoteMessageType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RemoteMessageType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Topic"), aname="_Topic", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://schemas.microsoft.com/2003/10/Serialization/","guid",lazy=False)(pname=(ns,"SessionId"), aname="_SessionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://Intel.ServicesManager.ServiceContracts","AgentIdentityType",lazy=False)(pname=(ns,"AgentIdentity"), aname="_AgentIdentity", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReplyTopic"), aname="_ReplyTopic", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserId"), aname="_UserId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AgentVersion"), aname="_AgentVersion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DomainId"), aname="_DomainId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.Payload_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Topic = None
                    self._Type = None
                    self._SessionId = None
                    self._AgentIdentity = None
                    self._ReplyTopic = None
                    self._UserId = None
                    self._AgentVersion = None
                    self._DomainId = None
                    self._Payload = None
                    return
            Holder.__name__ = "RemoteMessageType_Holder"
            self.pyclass = Holder


        class Payload_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Payload"
            schema = "http://Intel.ServicesManager.ServiceContracts"
            def __init__(self, **kw):
                ns = ns2.RemoteMessageType_Def.Payload_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs=1, nillable=False, processContents="lax")]
                kw["pname"] = ("http://Intel.ServicesManager.ServiceContracts","Payload")
                kw["aname"] = "_Payload"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = None
                        return
                Holder.__name__ = "Payload_Holder"
                self.pyclass = Holder




    class AgentIdentityType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://Intel.ServicesManager.ServiceContracts"
        type = (schema, "AgentIdentityType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.AgentIdentityType_Def.schema
            TClist = [GTD("http://schemas.microsoft.com/2003/10/Serialization/","guid",lazy=False)(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Persistent"), aname="_Persistent", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Persistent = None
                    return
            Holder.__name__ = "AgentIdentityType_Holder"
            self.pyclass = Holder

    class RemoteErrorType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://Intel.ServicesManager.ServiceContracts"
        type = (schema, "RemoteErrorType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RemoteErrorType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ExceptionType"), aname="_ExceptionType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ExceptionMessage"), aname="_ExceptionMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorCode"), aname="_ErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserMessage"), aname="_UserMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ExceptionType = None
                    self._ExceptionMessage = None
                    self._ErrorCode = None
                    self._UserMessage = None
                    return
            Holder.__name__ = "RemoteErrorType_Holder"
            self.pyclass = Holder

    class ArrayOfRemoteMessageType_Dec(ElementDeclaration):
        literal = "ArrayOfRemoteMessageType"
        schema = "http://Intel.ServicesManager.ServiceContracts"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://Intel.ServicesManager.ServiceContracts","ArrayOfRemoteMessageType")
            kw["aname"] = "_ArrayOfRemoteMessageType"
            if ns2.ArrayOfRemoteMessageType_Def not in ns2.ArrayOfRemoteMessageType_Dec.__bases__:
                bases = list(ns2.ArrayOfRemoteMessageType_Dec.__bases__)
                bases.insert(0, ns2.ArrayOfRemoteMessageType_Def)
                ns2.ArrayOfRemoteMessageType_Dec.__bases__ = tuple(bases)

            ns2.ArrayOfRemoteMessageType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfRemoteMessageType_Dec_Holder"

    class RemoteMessageType_Dec(ElementDeclaration):
        literal = "RemoteMessageType"
        schema = "http://Intel.ServicesManager.ServiceContracts"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://Intel.ServicesManager.ServiceContracts","RemoteMessageType")
            kw["aname"] = "_RemoteMessageType"
            if ns2.RemoteMessageType_Def not in ns2.RemoteMessageType_Dec.__bases__:
                bases = list(ns2.RemoteMessageType_Dec.__bases__)
                bases.insert(0, ns2.RemoteMessageType_Def)
                ns2.RemoteMessageType_Dec.__bases__ = tuple(bases)

            ns2.RemoteMessageType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RemoteMessageType_Dec_Holder"

    class AgentIdentityType_Dec(ElementDeclaration):
        literal = "AgentIdentityType"
        schema = "http://Intel.ServicesManager.ServiceContracts"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://Intel.ServicesManager.ServiceContracts","AgentIdentityType")
            kw["aname"] = "_AgentIdentityType"
            if ns2.AgentIdentityType_Def not in ns2.AgentIdentityType_Dec.__bases__:
                bases = list(ns2.AgentIdentityType_Dec.__bases__)
                bases.insert(0, ns2.AgentIdentityType_Def)
                ns2.AgentIdentityType_Dec.__bases__ = tuple(bases)

            ns2.AgentIdentityType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AgentIdentityType_Dec_Holder"

    class RemoteErrorType_Dec(ElementDeclaration):
        literal = "RemoteErrorType"
        schema = "http://Intel.ServicesManager.ServiceContracts"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://Intel.ServicesManager.ServiceContracts","RemoteErrorType")
            kw["aname"] = "_RemoteErrorType"
            if ns2.RemoteErrorType_Def not in ns2.RemoteErrorType_Dec.__bases__:
                bases = list(ns2.RemoteErrorType_Dec.__bases__)
                bases.insert(0, ns2.RemoteErrorType_Def)
                ns2.RemoteErrorType_Dec.__bases__ = tuple(bases)

            ns2.RemoteErrorType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RemoteErrorType_Dec_Holder"

# end class ns2 (tns: http://Intel.ServicesManager.ServiceContracts)

##############################
# targetNamespace
# http://Intel.ServicesManager
##############################

class ns3:
    targetNamespace = "http://Intel.ServicesManager"

    class GetMessages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMessages"
        schema = "http://Intel.ServicesManager"
        def __init__(self, **kw):
            ns = ns3.GetMessages_Dec.schema
            TClist = [GTD("http://schemas.microsoft.com/2003/10/Serialization/","guid",lazy=False)(pname=(ns,"agentId"), aname="_agentId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://Intel.ServicesManager","GetMessages")
            kw["aname"] = "_GetMessages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._agentId = None
                    return
            Holder.__name__ = "GetMessages_Holder"
            self.pyclass = Holder

    class GetMessagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMessagesResponse"
        schema = "http://Intel.ServicesManager"
        def __init__(self, **kw):
            ns = ns3.GetMessagesResponse_Dec.schema
            TClist = [GTD("http://Intel.ServicesManager.ServiceContracts","ArrayOfRemoteMessageType",lazy=False)(pname=(ns,"GetMessagesResult"), aname="_GetMessagesResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://Intel.ServicesManager","GetMessagesResponse")
            kw["aname"] = "_GetMessagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetMessagesResult = None
                    return
            Holder.__name__ = "GetMessagesResponse_Holder"
            self.pyclass = Holder

    class SendMessages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendMessages"
        schema = "http://Intel.ServicesManager"
        def __init__(self, **kw):
            ns = ns3.SendMessages_Dec.schema
            TClist = [GTD("http://Intel.ServicesManager.ServiceContracts","ArrayOfRemoteMessageType",lazy=False)(pname=(ns,"messagesInfo"), aname="_messagesInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://Intel.ServicesManager","SendMessages")
            kw["aname"] = "_SendMessages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messagesInfo = None
                    return
            Holder.__name__ = "SendMessages_Holder"
            self.pyclass = Holder

    class SendMessagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendMessagesResponse"
        schema = "http://Intel.ServicesManager"
        def __init__(self, **kw):
            ns = ns3.SendMessagesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://Intel.ServicesManager","SendMessagesResponse")
            kw["aname"] = "_SendMessagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SendMessagesResponse_Holder"
            self.pyclass = Holder

    class SendMessageSync_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendMessageSync"
        schema = "http://Intel.ServicesManager"
        def __init__(self, **kw):
            ns = ns3.SendMessageSync_Dec.schema
            TClist = [GTD("http://Intel.ServicesManager.ServiceContracts","RemoteMessageType",lazy=False)(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://Intel.ServicesManager","SendMessageSync")
            kw["aname"] = "_SendMessageSync"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "SendMessageSync_Holder"
            self.pyclass = Holder

    class SendMessageSyncResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendMessageSyncResponse"
        schema = "http://Intel.ServicesManager"
        def __init__(self, **kw):
            ns = ns3.SendMessageSyncResponse_Dec.schema
            TClist = [GTD("http://Intel.ServicesManager.ServiceContracts","RemoteMessageType",lazy=False)(pname=(ns,"SendMessageSyncResult"), aname="_SendMessageSyncResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://Intel.ServicesManager","SendMessageSyncResponse")
            kw["aname"] = "_SendMessageSyncResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendMessageSyncResult = None
                    return
            Holder.__name__ = "SendMessageSyncResponse_Holder"
            self.pyclass = Holder

# end class ns3 (tns: http://Intel.ServicesManager)
